#!/usr/bin/env python
# coding: utf-8

# In[5]:


e = 5
N = 84364443735725034864402554533826279174703893439763343343863260342756678609216895093779263028809246505955647572176682669445270008816481771701417554768871285020442403001649254405058303439906229201909599348669565697534331652019516409514800265887388539283381053937433496994442146419682027649079704982600857517093
C = 23701787746829110396789094907319830305538180376427283226295906585301889543996533410539381779684366880970896279018807100530176651625086988655210858554133345906272561027798171440923147960165094891980452757852685707020289384698322665347609905744582248157246932007978339129630067022987966706955482598869800151693

# RSA known parameters
ZmodN = Zmod(N);


def coppersmith_howgrave_univariate(pol, modulus, beta, mm, tt, XX):
    # Defining variables
    gg = []
    new_pol = 0
    roots = []

    dd = pol.degree()

    polZ = pol.change_ring(ZZ)
    x = polZ.parent().gen()
    a = x * XX

    # Here, polynomial computation takes place

    for ii in range(mm):
        for jj in range(dd):
            temp1 = (a) ** jj
            temp2 = mm - ii
            temp3 = polZ(a) ** ii
            gg.append(temp1 * modulus ** (temp2) * temp3)
    for ii in range(tt):
        result = (a) ** ii * polZ(a) ** mm
        gg.append(result)

    # constructing a lattice B

    BB = Matrix(ZZ, dd * mm + tt)

    for ii in range(dd * mm + tt):
        for jj in range(ii + 1):
            temp = gg[ii][jj]
            BB[ii, jj] = temp

    # LLL
    BB = BB.LLL()

    # transform shortest vector in polynomial

    for ii in range(dd * mm + tt):
        a = x ** ii
        b = BB[0, ii]
        c = XX ** ii
        new_pol += a * b / c

    # Now we will dinf the factor polynomial
    potential_roots = new_pol.roots()

    # test roots

    for root in potential_roots:
        if root[0].is_integer():
            a = ZZ(root[0])
            result = polZ(a)
            if gcd(modulus, result) < modulus ^ beta:
                pass
            else:
                roots.append(a)

    return roots


def break_RSA(p_str, max_length_M):
    global e, C, ZmodN

    p_binary_str = ''.join(['{0:08b}'.format(ord(x)) for x in p_str])

    for length_M in range(0, max_length_M + 1, 4):  # size of the root

        # Problem to equation (default)
        P.< M > = PolynomialRing(ZmodN)  # , implementation='NTL')
        temp = (int(p_binary_str, 2) << length_M)
        pol = (temp + M) ^ e - C
        dd = pol.degree()

        # Tweak those
        beta = 1
        epsilon = beta / 7
        a = dd * epsilon
        mm = ceil(beta ** 2 / a)
        b = dd * mm
        c = 1 / beta
        tt = floor(b * (c - 1))
        XX = ceil(N ** ((beta ** 2 / dd) - epsilon))

        roots = coppersmith_howgrave_univariate(pol, N, beta, mm, tt, XX)

        if not roots:
            pass
        else:
            print("Root is :", ' {0:b}'.format(roots[0]))
            return


if __name__ == "__main__":
    break_RSA("You see a Gold-Bug in one corner. It is the key to a treasure found by ", 200)


# In[ ]:





# In[ ]:





# In[ ]:





# In[ ]:



